// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// enum Role {
//   ADMIN
//   USER
//   SELLER
// }

model User {
  id                  String    @id @default(cuid()) @map("_id")
  name                String?   @default("")
  last_name           String?   @default("")
  email               String?   @unique
  created             DateTime  @default(now())
  emailVerified       DateTime?
  onboarded           Boolean?  @default(false)
  image               String?   @default("")
  // role          Role      @default(USER)
  accounts            Account[]
  sessions            Session[]
  likes               Like[]
  Review              Review[]
  stripe_customer_id  String?
  tier                String?
  receivedBoilerplate Boolean?  @default(false)
}

model Boilerplate { 
  id          String   @id @default(cuid()) @map("_id")
  title       String
  description String
  previewLink String?
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id          String   @id @default(cuid()) @map("_id")
  userId      String // seller's userID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  price       Float
  likes       Like[]
  tags        String[]
  reviews     Review[]
  imageUrl    String?
  approved    Boolean  @default(false)
  previewLink String?
}

model Like {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
}

model Review {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id])
}
